Mariannes-MBP:ca1 mariannebezaire$ hg diff setupfiles/clamp/electrophys.hoc 
diff -r 1bdccf05c993 setupfiles/clamp/electrophys.hoc
--- a/setupfiles/clamp/electrophys.hoc	Mon Jul 06 23:10:21 2015 +0100
+++ b/setupfiles/clamp/electrophys.hoc	Fri Mar 18 12:10:44 2016 -0400
@@ -68,6 +68,7 @@
 	{default_var("cellnum",100)}		// ?
 	{default_var("cellmechs",0)}		// ?
 	{default_var("numeapair",1)}		// for paired recording, run this number of pairs and average them
+	{default_var("onecellsweep",1)}		// for paired recording, run this number of pairs and average them
 
 objref cl, f, f2, myvec, mygvec
 strdef myfile, channel, chan, conductstr, revpotstr, cmdstr
@@ -670,6 +671,7 @@
 tmp2unused=1
 
 strdef cmdstr
+objref myIVec, tvec
 
 if (onecell==1) {
 	// single cell props
@@ -716,19 +718,143 @@
 	fcell.close()
 
 
+	if (onecellsweep==1) {
+		// iClamp stuff
+		strdef tempString
+		f2 = new File()
+		sprint(pathstr,"%s%s%s%s%s", relpath, sl, "setupfiles", sl, "iclamp.dat")								
+		f2.ropen(pathstr)
+		numiclamps = f2.scanvar
+		stimAMPvector = new Vector(numiclamps)
+		for i = 0, numiclamps-1 {
+			stimAMPvector.x(i) = f2.scanvar
+		}
+		f2.close()
+		for i = 0, numiclamps-1 {
+			for idxes=0, numCellidxes-1 {
+				cellind = mycellvecs.x[idxes]
+				gid=cellType[cellind].cellStartGid
+				if (pc.gid_exists(gid)) {
+					// add recording locations to cell:
+					strdef sname, cmdstr, outfile
+					cell = pc.gid2cell(gid)
+					if (cell.is_art==0) {
+						 cell.soma { //forsec cell.all { // add recording location to middle of each section
+							sname = secname()
+							
+							{index = strobj.substr(sname, ".")+1}
+							{strobj.right(sname, index)}
+							{index = strobj.substr(sname, "[")}
+							if (index>0) {strobj.left(sname, index)}
+							sprint(cmdstr, "{objref trace_%s}", cellType[cellind].cellType_string)
+							execute1(cmdstr)
+							sprint(cmdstr, "{trace_%s = new Vector(%g)}", cellType[cellind].cellType_string, (tstop-tstart)/dt)
+							execute1(cmdstr)
+							sprint(cmdstr, "{trace_%s.record(&cell.%s.v(0.5))}", cellType[cellind].cellType_string, sname)
+							execute1(cmdstr)
+							
+							if (myi_flag==1) {
+								print_mechs(gid)
+								for rt = 0, mechlength.x[0]-1 {
+									sprint(cmdstr, "{objref %s_%s}", cellType[cellind].cellType_string, mechstring[rt].s)
+									execute1(cmdstr)
+									sprint(cmdstr, "{%s_%s = new Vector(%g)}", cellType[cellind].cellType_string, mechstring[rt].s, (tstop-tstart)/dt)
+									execute1(cmdstr)
+									sprint(cmdstr, "{%s_%s.record(&cell.%s.%s(0.5))}", cellType[cellind].cellType_string, mechstring[rt].s, sname, mechstring[rt].s)
+									execute1(cmdstr)
+								}		
+							}	
+						} 
 
-	// iClamp stuff
-	strdef tempString
-	f2 = new File()
-	sprint(pathstr,"%s%s%s%s%s", relpath, sl, "setupfiles", sl, "iclamp.dat")								
-	f2.ropen(pathstr)
-	numiclamps = f2.scanvar
-	stimAMPvector = new Vector(numiclamps)
-	for i = 0, numiclamps-1 {
-		stimAMPvector.x(i) = f2.scanvar
-	}
-	f2.close()
-	for i = 0, numiclamps-1 {
+						// add an iClamp (to be activated at various time points first)
+						sprint(cmdstr, "objref stim%g", cellind)
+						execute1(cmdstr)
+						sprint(cmdstr, "cell.soma stim%g = new IClamp(0.5)", cellind)
+						execute1(cmdstr)
+						sprint(cmdstr, "stim%g.dur = duration", cellind) //4000
+						execute1(cmdstr)
+						sprint(cmdstr, "stim%g.del = starttime", cellind) //0.01
+						execute1(cmdstr)
+						sprint(cmdstr, "stim%g.amp = stimAMPvector.x(i)", cellind) // can't be over 36.7 and must be greater than -22.85
+						execute1(cmdstr)
+					}		
+				}
+			}
+							
+			// run model
+			rrun()	// Run the network simulation
+			
+				
+			//for cellind=0, numCellTypes-1 {
+			for idxes=0, numCellidxes-1 {
+				cellind = mycellvecs.x[idxes]
+				gid=cellType[cellind].cellStartGid
+				if (pc.gid_exists(gid)) {
+					// add recording locations to cell:
+					strdef sname, cmdstr, outfile
+					cell = pc.gid2cell(gid)
+					if (cell.is_art==0) {
+						// write out recordings	
+						cell.soma { //forsec cell.all  {
+							sname = secname()
+							index = strobj.substr(sname, ".")+1
+							strobj.right(sname, index)
+							index = strobj.substr(sname, "[")
+							if (index>0) {strobj.left(sname, index)}
+							sprint(outfile, "%s%s%s%strace_%s.%s(0.5).%g.dat", relpath, sl, resultspath, sl, cellType[cellind].cellType_string, sname, i)
+
+								f = new File(outfile)
+								f.wopen()
+
+								print_mechs(gid) // mechstring = 
+								f.printf("t\tv")
+							if (myi_flag==1) {
+								for rt = 0, mechlength.x[0]-1 {
+									f.printf("\t%s", mechstring[rt].s)
+								}
+							}
+								f.printf("\n")
+								for j=0, (tstop-tstart)/dt-1 {
+									sprint(cmdstr, "{f.printf(\"%%g\\t%%g\", j*dt, trace_%s.x[j])}", cellType[cellind].cellType_string)
+									execute1(cmdstr)
+							if (myi_flag==1) {
+									for rt = 0, mechlength.x[0]-1 {
+										sprint(cmdstr, "{f.printf(\"\\t%%g\", %s_%s.x[j])}", cellType[cellind].cellType_string, mechstring[rt].s)
+										execute1(cmdstr)
+									}
+								}		
+									{f.printf("\n")}
+								}
+								f.close()
+							
+						}
+						sprint(cmdstr, "{objref stim%g}", cellind)
+						execute1(cmdstr)
+					}	
+				}
+			}
+		} // end of iclamp		
+	} else {
+		// load in custom stimulation protocol
+
+		// iClamp stuff
+		strdef tempString
+		f2 = new File()
+		sprint(pathstr,"%s%s%s%s%s", relpath, sl, "setupfiles", sl, "iclamp.dat")								
+		f2.ropen(pathstr)
+		numpoints = f2.scanvar
+		i=f2.scanvar // Don't need this, just a placeholder value
+		tvec = new Vector(numpoints)
+
+		myIVec = new Vector(numpoints)
+		for i=0, numpoints-1 {
+			tvec.x[i] = f2.scanvar // spike time in ms
+			myIVec.x[i] = f2.scanvar // gid of NetStim to make fire
+		}
+		f2.close()
+
+
+		i=0
 		for idxes=0, numCellidxes-1 {
 			cellind = mycellvecs.x[idxes]
 			gid=cellType[cellind].cellStartGid
@@ -769,11 +895,11 @@
 					execute1(cmdstr)
 					sprint(cmdstr, "cell.soma stim%g = new IClamp(0.5)", cellind)
 					execute1(cmdstr)
-					sprint(cmdstr, "stim%g.dur = duration", cellind) //4000
+					sprint(cmdstr, "stim%g.dur = 1e9", cellind) //4000
 					execute1(cmdstr)
-					sprint(cmdstr, "stim%g.del = starttime", cellind) //0.01
+					sprint(cmdstr, "stim%g.del = 0", cellind) //0.01
 					execute1(cmdstr)
-					sprint(cmdstr, "stim%g.amp = stimAMPvector.x(i)", cellind) // can't be over 36.7 and must be greater than -22.85
+					sprint(cmdstr, "myIVec.play(&stim%g.amp, tvec)", cellind) // can't be over 36.7 and must be greater than -22.85
 					execute1(cmdstr)
 				}		
 			}
@@ -831,7 +957,7 @@
 				}	
 			}
 		}
-	} // end of iclamp		
+	}
 }
 
 /***********************************************************************************************
